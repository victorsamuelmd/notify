package main

import (
	"database/sql"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestDatosMainPageHandler(t *testing.T) {
	req, err := http.NewRequest(http.MethodGet, "/home", nil)
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(mainPage)

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf(`handler returned wrong status code: expected %v got %v`,
			http.StatusOK, status)
	}

	var mapper M

	err = json.NewDecoder(rr.Body).Decode(&mapper)
	if err != nil {
		t.Fatal(err)
	}

	if mapper["message"] != "Hello World" {
		t.Errorf("Expected Hello world got %v", mapper)
	}
}

func TestActivateCorsMiddleware(t *testing.T) {
	req, err := http.NewRequest(http.MethodOptions, "/url", nil)
	req.Header.Set(`Origin`, `test.vsmd`)
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(activateCors(mainPage))

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf(`handler returned wrong status code: expected %v got %v`,
			http.StatusOK, status)
	}

	if headerAllowMethod := rr.Header().
		Get("Access-Control-Allow-Methods"); headerAllowMethod != "POST, OPTIONS" {
		t.Errorf("Wrong methods allowed %v", headerAllowMethod)

	}

	if headerAllowOrigin := rr.Header().
		Get("Access-Control-Allow-Origin"); headerAllowOrigin != "test.vsmd" {
		t.Errorf("Wrong origins allowed: %v", headerAllowOrigin)

	}
}

func TestDataBaseConection(t *testing.T) {
	db, err := sql.Open("postgres", "host=localhost port=5454 user=victorsamuelmd dbname=victorsamuelmd password=NataliaVictor12122801 sslmode=disable")
	if err != nil {
		t.Error(err)
	}
	defer db.Close()
	_, err = db.Exec(`create table heroes (
		hero_id integer primary key generated by default as identity,
		hero_name VARCHAR(50),
		hero_lastname VARCHAR(50),
		hero_username varchar(50) unique,
		hero_phone varchar(50)
		);`)
	defer db.Exec("DROP TABLE heroes;")

	if err != nil {
		t.Error(err)
	}
	hero := &Usuario{`victorsamuelmd`, `mosquera`, `3207922369`, `victorsamuelmd`}

	_, err = db.Exec(`insert into heroes values ($1, $2, $3, $4, $5)`, 1,
		hero.Nombres, hero.Apellidos, hero.Telefono, hero.NombreUsuario)

	if err != nil {
		t.Error(err)
	}

	row := db.QueryRow("select hero_id, hero_name from heroes where hero_id = 1 limit 1;")
	var id int
	var name string
	err = row.Scan(&id, &name)

	if err != nil {
		t.Error(err)
	}

	if name != `victorsamuelmd` {
		t.Errorf(`Expected victorsamuelmd but got %v`, name)
	}

	if id != 1 {
		t.Errorf(`Expected 1 but got %v`, id)
	}
}
